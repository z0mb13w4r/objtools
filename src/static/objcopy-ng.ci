static char zCOPYADJUSTWARNINGS[]          = "If --change-section-address or --change-section-lma or --change-section-vma is used, and the section pattern does not match any sections, issue a warning.";
static char zCOPYNOADJUSTWARNINGS[]        = "Do not issue a warning if --change-section-address or --adjust-section-lma or --adjust-section-vma is used, even if the section pattern does not match any sections.";
static char zCOPYDEBBUGING[]               = "Convert debugging information, if possible. This is not the default because only certain debugging formats are supported, and the conversion process can be time consuming.";
static char zCOPYDECOMPRESSDEBUGSECTIONS[] = "Decompress DWARF debug sections using zlib.";
static char zCOPYENABLEDETERMINISTIC[]     = "Operate in deterministic mode. When copying archive members and writing the archive index, use zero for UIDs, GIDs, timestamps, and use consistent file modes for all files.";
static char zCOPYDISABLEDETERMINISTIC[]    = "Do not operate in deterministic mode. This is the inverse of the -D option, above: when copying archive members and writing the archive index, use their actual UID, GID, timestamp, and file mode values.";
static char zCOPYDISCARDALL[]              = "Do not copy non-global symbols from the source file.";
static char zCOPYDISCARDLOCALS[]           = "Do not copy compiler-generated local symbols.";
static char zCOPYEXTRACTDWO[]              = "Extract the contents of all DWARF .dwo sections.";
static char zCOPYEXTRACTSYMBOL[]           = "Keep the file's section flags and symbols but remove all section data.";
static char zCOPYPURE[]                    = "Mark the output file as demand paged.";
static char zCOPYIMPURE[]                  = "Mark the output file as impure.";
static char zCOPYREADONLY[]                = "Make the output text write protected.";
static char zCOPYWRITABLE[]                = "Mark the output text as writable.";
static char zCOPYKEEPSYMBOLS[]             = "When stripping a file, perhaps with --strip-debug or --strip-unneeded, retain any symbols specifying source file names, which would otherwise get stripped.";
static char zCOPYONLYKEEPDEBUG[]           = "Strip a file, removing contents of any sections that would not be stripped by --strip-debug and leaving the debugging sections intact.";
static char zCOPYSTRIPDWO[]                = "Remove the contents of all DWARF .dwo sections, leaving the remaining debugging sections and all symbols intact.";
static char zCOPYWEAKEN[]                  = "Change all global symbols in the file to be weak.";
static char zCOPYLOCALIZEHIDDEN[]          = "In an ELF object, mark all symbols that have hidden or internal visibility as local.";
static char zCOPYMERGENOTES[]              = "For ELF files, attempt (or do not attempt) to reduce the size of any SHT_NOTE type sections by removing duplicate notes.";

static const args_t zOBJCOPYARGS[] = {
  {'H', "--help",                           OPTPROGRAM_HELP,                             NULL},
  {'V', "--version",                        OPTPROGRAM_VERSION,                          NULL},
  {'v', "--verbose",                        OPTPROGRAM_VERBOSE,                          NULL},
  {0,   "--adjust-warnings",                OPTOBJCOPY_CHANGE_WARNINGS},
  {0,   "--change-warnings",                OPTOBJCOPY_CHANGE_WARNINGS,                  zCOPYADJUSTWARNINGS},
  {0,   "--no-adjust-warnings",             OPTOBJCOPY_NO_CHANGE_WARNINGS},
  {0,   "--no-change-warnings",             OPTOBJCOPY_NO_CHANGE_WARNINGS,               zCOPYNOADJUSTWARNINGS},
  {0,   "--debugging",                      OPTOBJCOPY_DEBUGGING,                        zCOPYDEBBUGING},
  {0,   "--decompress-debug-sections",      OPTOBJCOPY_DECOMPRESS_DEBUG_SECTIONS,        zCOPYDECOMPRESSDEBUGSECTIONS},
  {'D', "--enable-deterministic-archives",  OPTOBJCOPY_ENABLE_DETERMINISTIC_ARCHIVES,    zCOPYENABLEDETERMINISTIC},
  {'U', "--disable-deterministic-archives", OPTOBJCOPY_DISABLE_DETERMINISTIC_ARCHIVES,   zCOPYDISABLEDETERMINISTIC},
  {'x', "--discard-all",                    OPTOBJCOPY_DISCARD_ALL,                      zCOPYDISCARDALL},
  {'X', "--discard-locals",                 OPTOBJCOPY_DISCARD_LOCALS,                   zCOPYDISCARDLOCALS},
  {0,   "--extract-dwo",                    OPTOBJCOPY_EXTRACT_DWO,                      zCOPYEXTRACTDWO},
  {0,   "--extract-symbol",                 OPTOBJCOPY_EXTRACT_SYMBOL,                   zCOPYEXTRACTSYMBOL},
  {0,   "--pure",                           OPTOBJCOPY_PURE,                             zCOPYPURE},
  {0,   "--impure",                         OPTOBJCOPY_IMPURE,                           zCOPYIMPURE},
  {0,   "--keep-file-symbols",              OPTOBJCOPY_KEEP_FILE_SYMBOLS,                zCOPYKEEPSYMBOLS},
  {0,   "--only-keep-debug",                OPTOBJCOPY_ONLY_KEEP_DEBUG,                  zCOPYONLYKEEPDEBUG},
  {0,   "--localize-hidden",                OPTOBJCOPY_LOCALIZE_HIDDEN,                  zCOPYLOCALIZEHIDDEN},
  {'M', "--merge-notes",                    OPTOBJCOPY_MERGE_NOTES},
  {0,   "--no-merge-notes",                 OPTOBJCOPY_NO_MERGE_NOTES,                   zCOPYMERGENOTES},
  {'p', "--preserve-dates",                 OPTOBJCOPY_PRESERVE_DATES},
  {0,   "--readonly-text",                  OPTOBJCOPY_READONLY_TEXT,                    zCOPYREADONLY},
  {0,   "--writable-text",                  OPTOBJCOPY_WRITABLE_TEXT,                    zCOPYWRITABLE},
  {0,   "--strip-section-headers",          OPTOBJCOPY_STRIP_SECTION_HEADERS},
  {'S', "--strip-all",                      OPTOBJCOPY_STRIP_ALL},
  {'g', "--strip-debug",                    OPTOBJCOPY_STRIP_DEBUG},
  {0,   "--strip-dwo",                      OPTOBJCOPY_STRIP_DWO,                        zCOPYSTRIPDWO},
  {0,   "--strip-unneeded",                 OPTOBJCOPY_STRIP_UNNEEDED},
  {0,   "--weaken",                         OPTOBJCOPY_WEAKEN,                           zCOPYWEAKEN},
  {0,   "--dump-sections-all",              OPTOBJCOPY_DUMP_SECTIONS_ALL},
  {0, NULL},
};

