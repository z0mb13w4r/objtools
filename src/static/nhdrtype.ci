#define NT_GNU_BUILD_ATTRIBUTE_OPEN     0x100
#define NT_GNU_BUILD_ATTRIBUTE_FUNC     0x101

#define NT_X86_CET                      0x203 /* x86 CET state. */
#define NT_ARM_TAGGED_ADDR_CTRL         0x409 /* AArch64 tagged address control (prctl()) */
#define NT_ARM_PAC_ENABLED_KEYS         0x40a /* AArch64 pointer authentication enabled keys (prctl()) */
#define NT_ARM_SSVE                     0x40b /* AArch64 SME streaming SVE registers. */
#define NT_ARM_ZA                       0x40c /* AArch64 SME ZA register. */
#define NT_ARC_V2                       0x600 /* ARC HS accumulator/extra registers. */
#define NT_RISCV_CSR                    0x900 /* RISC-V Control and Status Registers */

#define NT_FPREGS                       12 /* Has a struct fpregset */
#define NT_WIN32PSTATUS                 18 /* Has a struct win32_pstatus */

/* The range 0xff000000 to 0xffffffff is set aside for notes that don't
   originate from any particular operating system.  */
#define NT_GDB_TDESC                    0xff000000 /* Contains copy of GDB's target description XML. */

static convert_t zNHDRTYPE[] = {
  {"NT_GNU_ABI_TAG (ABI version tag)",                                       NT_GNU_ABI_TAG},
  {"NT_GNU_HWCAP (DSO-supplied software HWCAP info)",                        NT_GNU_HWCAP},
  {"NT_GNU_BUILD_ID (unique build ID bitstring)",                            NT_GNU_BUILD_ID},
  {"NT_GNU_GOLD_VERSION (gold version)",                                     NT_GNU_GOLD_VERSION},
  {"NT_GNU_PROPERTY_TYPE_0",                                                 NT_GNU_PROPERTY_TYPE_0},
  {"NT_GNU_BUILD_ATTRIBUTE_OPEN",                                            NT_GNU_BUILD_ATTRIBUTE_OPEN},
  {"NT_GNU_BUILD_ATTRIBUTE_FUNC",                                            NT_GNU_BUILD_ATTRIBUTE_FUNC},
  {0, 0}
};

static convert_t zNHDRTYPECORE[] = {
  {"NT_AUXV (auxiliary vector)",                                             NT_AUXV},
  {"NT_PRSTATUS (prstatus structure)",                                       NT_PRSTATUS},
  {"NT_FPREGSET (floating point registers)",                                 NT_FPREGSET},
  {"NT_PRPSINFO (prpsinfo structure)",                                       NT_PRPSINFO},
  {"NT_TASKSTRUCT (task structure)",                                         NT_TASKSTRUCT},
  {"NT_GDB_TDESC (GDB XML target description)",                              NT_GDB_TDESC},
  {"NT_PRXFPREG (user_xfpregs structure)",                                   NT_PRXFPREG},
  {"NT_PPC_VMX (ppc Altivec registers)",                                     NT_PPC_VMX},
  {"NT_PPC_VSX (ppc VSX registers)",                                         NT_PPC_VSX},
  {"NT_PPC_TAR (ppc TAR register)",                                          NT_PPC_TAR},
  {"NT_PPC_PPR (ppc PPR register)",                                          NT_PPC_PPR},
  {"NT_PPC_DSCR (ppc DSCR register)",                                        NT_PPC_DSCR},
  {"NT_PPC_EBB (ppc EBB registers)",                                         NT_PPC_EBB},
  {"NT_PPC_PMU (ppc PMU registers)",                                         NT_PPC_PMU},
  {"NT_PPC_TM_CGPR (ppc checkpointed GPR registers)",                        NT_PPC_TM_CGPR},
  {"NT_PPC_TM_CFPR (ppc checkpointed floating point registers)",             NT_PPC_TM_CFPR},
  {"NT_PPC_TM_CVMX (ppc checkpointed Altivec registers)",                    NT_PPC_TM_CVMX},
  {"NT_PPC_TM_CVSX (ppc checkpointed VSX registers)",                        NT_PPC_TM_CVSX},
  {"NT_PPC_TM_SPR (ppc TM special purpose registers)",                       NT_PPC_TM_SPR},
  {"NT_PPC_TM_CTAR (ppc checkpointed TAR register)",                         NT_PPC_TM_CTAR},
  {"NT_PPC_TM_CPPR (ppc checkpointed PPR register)",                         NT_PPC_TM_CPPR},
  {"NT_PPC_TM_CDSCR (ppc checkpointed DSCR register)",                       NT_PPC_TM_CDSCR},
  {"NT_386_TLS (x86 TLS information)",                                       NT_386_TLS},
  {"NT_386_IOPERM (x86 I/O permissions)",                                    NT_386_IOPERM},
  {"NT_X86_XSTATE (x86 XSAVE extended state)",                               NT_X86_XSTATE},
  {"NT_X86_CET (x86 CET state)",                                             NT_X86_CET},
  {"NT_S390_HIGH_GPRS (s390 upper register halves)",                         NT_S390_HIGH_GPRS},
  {"NT_S390_TIMER (s390 timer register)",                                    NT_S390_TIMER},
  {"NT_S390_TODCMP (s390 TOD comparator register)",                          NT_S390_TODCMP},
  {"NT_S390_TODPREG (s390 TOD programmable register)",                       NT_S390_TODPREG},
  {"NT_S390_CTRS (s390 control registers)",                                  NT_S390_CTRS},
  {"NT_S390_PREFIX (s390 prefix register)",                                  NT_S390_PREFIX},
  {"NT_S390_LAST_BREAK (s390 last breaking event address)",                  NT_S390_LAST_BREAK},
  {"NT_S390_SYSTEM_CALL (s390 system call restart data)",                    NT_S390_SYSTEM_CALL},
  {"NT_S390_TDB (s390 transaction diagnostic block)",                        NT_S390_TDB},
  {"NT_S390_VXRS_LOW (s390 vector registers 0-15 upper half)",               NT_S390_VXRS_LOW},
  {"NT_S390_VXRS_HIGH (s390 vector registers 16-31)",                        NT_S390_VXRS_HIGH},
  {"NT_S390_GS_CB (s390 guarded-storage registers)",                         NT_S390_GS_CB},
  {"NT_S390_GS_BC (s390 guarded-storage broadcast control)",                 NT_S390_GS_BC},
  {"NT_ARM_VFP (arm VFP registers)",                                         NT_ARM_VFP},
  {"NT_ARM_TLS (AArch TLS registers)",                                       NT_ARM_TLS},
  {"NT_ARM_HW_BREAK (AArch hardware breakpoint registers)",                  NT_ARM_HW_BREAK},
  {"NT_ARM_HW_WATCH (AArch hardware watchpoint registers)",                  NT_ARM_HW_WATCH},
  {"NT_ARM_SYSTEM_CALL (AArch system call number)",                          NT_ARM_SYSTEM_CALL},
  {"NT_ARM_SVE (AArch SVE registers)",                                       NT_ARM_SVE},
  {"NT_ARM_PAC_MASK (AArch pointer authentication code masks)",              NT_ARM_PAC_MASK},
  {"NT_ARM_PACA_KEYS (ARM pointer authentication address keys)",             NT_ARM_PACA_KEYS},
  {"NT_ARM_PACG_KEYS (ARM pointer authentication generic keys)",             NT_ARM_PACG_KEYS},
  {"NT_ARM_TAGGED_ADDR_CTRL (AArch tagged address control)",                 NT_ARM_TAGGED_ADDR_CTRL},
  {"NT_ARM_SSVE (AArch64 streaming SVE registers)",                          NT_ARM_SSVE},
  {"NT_ARM_ZA (AArch64 SME ZA register)",                                    NT_ARM_ZA},
  {"NT_ARM_PAC_ENABLED_KEYS (AArch64 pointer authentication enabled keys)",  NT_ARM_PAC_ENABLED_KEYS},
  {"NT_ARC_V2 (ARC HS accumulator/extra registers)",                         NT_ARC_V2},
  {"NT_RISCV_CSR (RISC-V control and status registers)",                     NT_RISCV_CSR},
  {"NT_PSTATUS (pstatus structure)",                                         NT_PSTATUS},
  {"NT_FPREGS (floating point registers)",                                   NT_FPREGS},
  {"NT_PSINFO (psinfo structure)",                                           NT_PSINFO},
  {"NT_LWPSTATUS (lwpstatus_t structure)",                                   NT_LWPSTATUS},
  {"NT_LWPSINFO (lwpsinfo_t structure)",                                     NT_LWPSINFO},
  {"NT_WIN32PSTATUS (win32_pstatus structure)",                              NT_WIN32PSTATUS},
  {"NT_SIGINFO (siginfo_t data)",                                            NT_SIGINFO},
  {"NT_FILE (mapped files)",                                                 NT_FILE},
  {0, 0}
};

static pconvert_t get_NHDRTYPE(const pbuffer_t p) {
  if (ET_CORE == get_etype(p)) {
    return zNHDRTYPECORE;
  }

  return zNHDRTYPE;
}

