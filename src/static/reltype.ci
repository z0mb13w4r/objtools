static convert_t zRELTYPE32[] = {
  {"R_386_NONE",                   R_386_NONE},
  {"R_386_32",                     R_386_32},
  {"R_386_PC32",                   R_386_PC32},
  {"R_386_GOT32",                  R_386_GOT32},
  {"R_386_GOT32X",                 R_386_GOT32X},
  {"R_386_PLT32",                  R_386_PLT32},
  {"R_386_COPY",                   R_386_COPY},
  {"R_386_GLOB_DAT",               R_386_GLOB_DAT},
  {"R_386_JMP_SLOT",               R_386_JMP_SLOT},
  {"R_386_RELATIVE",               R_386_RELATIVE},
  {"R_386_GOTOFF",                 R_386_GOTOFF},
  {"R_386_GOTPC",                  R_386_GOTPC},
  {"R_386_32PLT",                  R_386_32PLT},
  {"R_386_16",                     R_386_16},
  {"R_386_PC16",                   R_386_PC16},
  {"R_386_8",                      R_386_8},
  {"R_386_PC8",                    R_386_PC8},
  {"R_386_SIZE32",                 R_386_SIZE32},
  {0, 0}
};

#define R_ARM_THM_CALL             (10)
#define R_ARM_BASE_PREL            (25)
#define R_ARM_GOT_BREL             (26)

static convert_t zRELTYPE32ARM[] = {
  {"R_ARM_ABS32",                  R_ARM_ABS32},
  {"R_ARM_REL32",                  R_ARM_REL32},
  {"R_ARM_THM_CALL",               R_ARM_THM_CALL},
  {"R_ARM_BASE_PREL",              R_ARM_BASE_PREL},
  {"R_ARM_GOT_BREL",               R_ARM_GOT_BREL},
  {"R_ARM_GOT_BREL12",             R_ARM_GOT_BREL12},
  {"R_ARM_RELATIVE",               R_ARM_RELATIVE},
  {"R_ARM_GLOB_DAT",               R_ARM_GLOB_DAT},
  {"R_ARM_JUMP_SLOT",              R_ARM_JUMP_SLOT},
  {0, 0}
};

static convert_t zRELTYPE64[] = {
  {"R_X86_64_NONE",                R_X86_64_NONE},
  {"R_X86_64_64",                  R_X86_64_64},
  {"R_X86_64_PC32",                R_X86_64_PC32},
  {"R_X86_64_GOT32",               R_X86_64_GOT32},
  {"R_X86_64_PLT32",               R_X86_64_PLT32},
  {"R_X86_64_COPY",                R_X86_64_COPY},
  {"R_X86_64_GLOB_DAT",            R_X86_64_GLOB_DAT},
  {"R_X86_64_JUMP_SLOT",           R_X86_64_JUMP_SLOT},
  {"R_X86_64_RELATIVE",            R_X86_64_RELATIVE},
  {"R_X86_64_GOTPCREL",            R_X86_64_GOTPCREL},
  {"R_X86_64_32",                  R_X86_64_32},
  {"R_X86_64_32S",                 R_X86_64_32S},
  {"R_X86_64_16",                  R_X86_64_16},
  {"R_X86_64_PC16",                R_X86_64_PC16},
  {"R_X86_64_8",                   R_X86_64_8},
  {"R_X86_64_PC8",                 R_X86_64_PC8},
  {"R_X86_64_PC64",                R_X86_64_PC64},
  {"R_X86_64_GOTOFF64",            R_X86_64_GOTOFF64},
  {"R_X86_64_GOTPC32",             R_X86_64_GOTPC32},
  {"R_X86_64_SIZE32",              R_X86_64_SIZE32},
  {"R_X86_64_SIZE64",              R_X86_64_SIZE64},
  {0, 0}
};

static convert_t zRELTYPE64ARM[] = {
  {"R_AARCH64_JUMP26",              R_AARCH64_JUMP26},
  {"R_AARCH64_CALL26",              R_AARCH64_CALL26},
  {"R_AARCH64_ADR_PREL_LO21",       R_AARCH64_ADR_PREL_LO21},
  {"R_AARCH64_ADR_PREL_PG_HI21",    R_AARCH64_ADR_PREL_PG_HI21},
  {"R_AARCH64_ADR_PREL_PG_HI21_NC", R_AARCH64_ADR_PREL_PG_HI21_NC},
  {"R_AARCH64_ADD_ABS_LO12_NC",     R_AARCH64_ADD_ABS_LO12_NC},
  {"R_AARCH64_COPY",                R_AARCH64_COPY},
  {"R_AARCH64_GLOB_DAT",            R_AARCH64_GLOB_DAT},
  {"R_AARCH64_JUMP_SLOT",           R_AARCH64_JUMP_SLOT},
  {"R_AARCH64_RELATIVE",            R_AARCH64_RELATIVE},
  {"R_AARCH64_LD64_GOTOFF_LO15",    R_AARCH64_LD64_GOTOFF_LO15},
  {"R_AARCH64_LD64_GOT_LO12_NC",    R_AARCH64_LD64_GOT_LO12_NC},
  {"R_AARCH64_LD64_GOTPAGE_LO15",   R_AARCH64_LD64_GOTPAGE_LO15},
  {"R_AARCH64_ADR_GOT_PAGE",        R_AARCH64_ADR_GOT_PAGE},
  {"R_AARCH64_PREL16",              R_AARCH64_PREL16},
  {"R_AARCH64_PREL32",              R_AARCH64_PREL32},
  {"R_AARCH64_PREL64",              R_AARCH64_PREL64},
  {"R_AARCH64_ABS16",               R_AARCH64_ABS16},
  {"R_AARCH64_ABS32",               R_AARCH64_ABS32},
  {"R_AARCH64_ABS64",               R_AARCH64_ABS64},
  {0, 0}
};

static pick_t zRELTYPE32DEF[] = {
  R_386_32,
  R_386_PC32,
  R_386_GOT32X,
  R_386_GOTPC,
  R_386_PLT32,
  R_386_GOTOFF,
  PICK_END
};

static pick_t zRELTYPE32ARMDEF[] = {
  R_ARM_ABS32,
  R_ARM_REL32,
  R_ARM_GOT_BREL,
  R_ARM_THM_CALL,
  R_ARM_BASE_PREL,
  PICK_END
};

static pick_t zRELTYPE64DEF[] = {
  R_X86_64_8,
  R_X86_64_16,
  R_X86_64_32,
  R_X86_64_64,
  R_X86_64_PC32,
  R_X86_64_PLT32,
  PICK_END
};

static pick_t zRELTYPE64ARMDEF[] = {
  R_AARCH64_LD64_GOT_LO12_NC,
  R_AARCH64_ADR_PREL_PG_HI21,
  R_AARCH64_ADD_ABS_LO12_NC,
  R_AARCH64_ADR_GOT_PAGE,
  R_AARCH64_CALL26,
  R_AARCH64_PREL32,
  R_AARCH64_ABS64,
  PICK_END
};

static pick_t zRELTYPE32VER[] = {
  R_386_GLOB_DAT,
  R_386_JMP_SLOT,
  PICK_END
};

static pick_t zRELTYPE32ARMVER[] = {
  R_ARM_GLOB_DAT,
  R_ARM_JUMP_SLOT,
  PICK_END
};

static pick_t zRELTYPE32SAFE[] = {
  R_386_NONE,
  R_386_RELATIVE,
  PICK_END
};

static pick_t zRELTYPE32ARMSAFE[] = {
  R_ARM_NONE,
  R_ARM_RELATIVE,
  PICK_END
};

static pick_t zRELTYPE64VER[] = {
  R_X86_64_GLOB_DAT,
  R_X86_64_JUMP_SLOT,
  R_X86_64_COPY,
  PICK_END
};

static pick_t zRELTYPE64ARMVER[] = {
  R_AARCH64_GLOB_DAT,
  R_AARCH64_JUMP_SLOT,
  PICK_END
};

static pick_t zRELTYPE64SAFE[] = {
  R_X86_64_NONE,
  PICK_END
};

static pick_t zRELTYPE64ARMSAFE[] = {
  PICK_END
};

static pick_t zRELTYPE64PACK[] = {
  R_X86_64_RELATIVE,
  PICK_END
};

static pick_t zRELTYPE64ARMPACK[] = {
  R_AARCH64_RELATIVE,
  PICK_END
};

static pick_t zRELTYPE64SHEX8[] = {
  R_X86_64_8,
  R_X86_64_PC8,
  PICK_END
};

static pick_t zRELTYPE64SHEX16[] = {
  R_X86_64_16,
  R_X86_64_PC16,
  PICK_END
};

static pick_t zRELTYPE64SHEX32[] = {
  R_X86_64_32,
  R_X86_64_GLOB_DAT,
  R_X86_64_JUMP_SLOT,
  R_X86_64_PC32,
  R_X86_64_PLT32,
  R_X86_64_COPY,
  PICK_END
};

static pick_t zRELTYPE64SHEX32ARM[] = {
  R_AARCH64_GLOB_DAT,
  R_AARCH64_JUMP_SLOT,
  R_AARCH64_LD64_GOT_LO12_NC,
  R_AARCH64_ADR_PREL_PG_HI21,
  R_AARCH64_ADD_ABS_LO12_NC,
  R_AARCH64_ADR_GOT_PAGE,
  R_AARCH64_CALL26,
  R_AARCH64_PREL32,
  PICK_END
};

static pick_t zRELTYPE64SHEX64[] = {
  R_X86_64_64,
  R_X86_64_PC64,
  PICK_END
};

static pick_t zRELTYPE64SHEX64ARM[] = {
  R_AARCH64_ABS64,
  PICK_END
};

static pconvert_t get_RELTYPE(const pbuffer_t p) {
  switch (ecget_emachine(p)) {
  case EM_386:               return zRELTYPE32;
  case EM_ARM:               return zRELTYPE32ARM;
  case EM_X86_64:            return zRELTYPE64;
  case EM_AARCH64:           return zRELTYPE64ARM;
  default:
    break;
  }

  return NULL;
}

ppick_t get_RELTYPEDEF(const pbuffer_t p) {
  switch (ecget_emachine(p)) {
  case EM_386:               return zRELTYPE32DEF;
  case EM_ARM:               return zRELTYPE32ARMDEF;
  case EM_X86_64:            return zRELTYPE64DEF;
  case EM_AARCH64:           return zRELTYPE64ARMDEF;
  default:
    break;
  }

  return NULL;
}

ppick_t get_RELTYPEVER(const pbuffer_t p) {
  switch (ecget_emachine(p)) {
  case EM_386:               return zRELTYPE32VER;
  case EM_ARM:               return zRELTYPE32ARMVER;
  case EM_X86_64:            return zRELTYPE64VER;
  case EM_AARCH64:           return zRELTYPE64ARMVER;
  default:
    break;
  }

  return NULL;
}

static ppick_t get_RELTYPESAFE(const pbuffer_t p) {
  switch (ecget_emachine(p)) {
  case EM_386:               return zRELTYPE32SAFE;
  case EM_ARM:               return zRELTYPE32ARMSAFE;
  case EM_X86_64:            return zRELTYPE64SAFE;
  case EM_AARCH64:           return zRELTYPE64ARMSAFE;
  default:
    break;
  }

  return NULL;
}

ppick_t get_RELTYPESHEX8(const pbuffer_t p) {
  switch (ecget_emachine(p)) {
  case EM_X86_64:            return zRELTYPE64SHEX8;
  default:
    break;
  }

  return NULL;
}

ppick_t get_RELTYPESHEX16(const pbuffer_t p) {
  switch (ecget_emachine(p)) {
  case EM_X86_64:            return zRELTYPE64SHEX16;
  default:
    break;
  }

  return NULL;
}

ppick_t get_RELTYPESHEX32(const pbuffer_t p) {
  switch (ecget_emachine(p)) {
  case EM_X86_64:            return zRELTYPE64SHEX32;
  case EM_AARCH64:           return zRELTYPE64SHEX32ARM;
  default:
    break;
  }

  return NULL;
}

ppick_t get_RELTYPESHEX64(const pbuffer_t p) {
  switch (ecget_emachine(p)) {
  case EM_X86_64:            return zRELTYPE64SHEX64;
  case EM_AARCH64:           return zRELTYPE64SHEX64ARM;
  default:
    break;
  }

  return NULL;
}


static ppick_t get_RELTYPEPACK(const pbuffer_t p) {
  switch (ecget_emachine(p)) {
  case EM_X86_64:            return zRELTYPE64PACK;
  case EM_AARCH64:           return zRELTYPE64ARMPACK;
  default:
    break;
  }

  return NULL;
}

