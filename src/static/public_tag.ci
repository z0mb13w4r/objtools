#define TAG_CPU_raw_name               (4)
#define TAG_CPU_name                   (5)
#define TAG_CPU_arch                   (6)
#define TAG_CPU_arch_profile           (7)
#define TAG_ARM_ISA_use                (8)
#define TAG_THUMB_ISA_use              (9)
#define TAG_FP_arch                    (10)
#define TAG_WMMX_arch                  (11)
#define TAG_Advanced_SIMD_arch         (12)
#define TAG_PCS_config                 (13)
#define TAG_ABI_PCS_R9_use             (14)
#define TAG_ABI_PCS_RW_data            (15)
#define TAG_ABI_PCS_RO_data            (16)
#define TAG_ABI_PCS_GOT_use            (17)
#define TAG_ABI_PCS_wchar_t            (18)
#define TAG_ABI_FP_rounding            (19)
#define TAG_ABI_FP_denormal            (20)
#define TAG_ABI_FP_exceptions          (21)
#define TAG_ABI_FP_user_exceptions     (22)
#define TAG_ABI_FP_number_model        (23)
#define TAG_ABI_align_needed           (24)
#define TAG_ABI_align_preserved        (25)
#define TAG_ABI_enum_size              (26)
#define TAG_ABI_HardFP_use             (27)
#define TAG_ABI_VFP_args               (28)
#define TAG_ABI_WMMX_args              (29)
#define TAG_ABI_optimization_goals     (30)
#define TAG_ABI_FP_optimization_goals  (31)
#define TAG_compatibility              (32)
#define TAG_CPU_unaligned_access       (34)
#define TAG_FP_HP_extension            (36)
#define TAG_ABI_FP_16bit_format        (37)
#define TAG_MP_extension_use           (42)
#define TAG_DIV_use                    (44)
#define TAG_DSP_extension              (46)
#define TAG_MVE_arch                   (48)
#define TAG_PAC_extension              (50)
#define TAG_BTI_extension              (52)
#define TAG_BTI_use                    (74)
#define TAG_PACRET_use                 (76)
#define TAG_nodefaults                 (64)
#define TAG_also_compatible_with       (65)
#define TAG_T2EE_use                   (66)
#define TAG_conformance                (67)
#define TAG_Virtualization_use         (68)
#define TAG_MP_extension_use_legacy    (70)

static convert_t ecPUBLICTAGARMARCH[] = {
  {"Pre-v4",                               0},
  {"v4",                                   1},
  {"v4T",                                  2},
  {"v5T",                                  3},
  {"v5TE",                                 4},
  {"v5TEJ",                                5},
  {"v6",                                   6},
  {"v6KZ",                                 7},
  {"v6T2",                                 8},
  {"v6K",                                  9},
  {"v7",                                   10},
  {"v6-M",                                 11},
  {"v6S-M",                                12},
  {"v7E-M",                                13},
  {"v8",                                   14},
  {"v8-R",                                 15},
  {"v8-M.baseline",                        16},
  {"v8-M.mainline",                        17},
  {"v8.1-A",                               18},
  {"v8.2-A",                               19},
  {"v8.3-A",                               20},
  {"v8.1-M.mainline",                      21},
  {"v9",                                   22},

  {0, 0}
};

static convert_t ecPUBLICTAGARMISAUSE[] = {
  {"No",                                   0},
  {"Yes",                                  1},

  {0, 0}
};

static convert_t ecPUBLICTAGARMTHUMBISAUSE[] = {
  {"No",                                   0},
  {"Thumb-1",                              1},
  {"Thumb-2",                              2},
  {"Yes",                                  3},

  {0, 0}
};

static convert_t ecPUBLICTAGARMFPARCH[] = {
  {"No",                                   0},
  {"VFPv1",                                1},
  {"VFPv2",                                2},
  {"VFPv3",                                3},
  {"VFPv3-D16",                            4},
  {"VFPv4",                                5},
  {"VFPv4-D16",                            6},
  {"FP for ARMv8",                         7},
  {"FPv5/FP-D16 for ARMv8",                8},

  {0, 0}
};

static convert_t ecPUBLICTAGARMWMMXARCH[] = {
  {"No",                                   0},
  {"WMMXv1",                               1},
  {"WMMXv2",                               2},

  {0, 0}
};

static convert_t ecPUBLICTAGARMADVSIMDARCH[] = {
  {"No",                                   0},
  {"NEONv1",                               1},
  {"NEONv1 with Fused-MAC",                2},
  {"NEON for ARMv8",                       3},
  {"NEON for ARMv8.1",                     4},

  {0, 0}
};

static convert_t ecPUBLICTAGARMPCSCONFIG[] = {
  {"None",                                 0},
  {"Bare platform",                        1},
  {"Linux application",                    2},
  {"Linux DSO",                            3},
  {"PalmOS 2004",                          4},
  {"PalmOS (reserved)",                    5},
  {"SymbianOS 2004",                       6},
  {"SymbianOS (reserved)",                 7},

  {0, 0}
};

static convert_t ecPUBLICTAGARMPCSR9USE[] = {
  {"V6",                                   0},
  {"SB",                                   1},
  {"TLS",                                  2},
  {"Unused",                               3},

  {0, 0}
};

static convert_t ecPUBLICTAGARMPCSRWDATA[] = {
  {"Absolute",                             0},
  {"PC-relative",                          1},
  {"SB-relative",                          2},
  {"None",                                 3},

  {0, 0}
};

static convert_t ecPUBLICTAGARMPCSRODATA[] = {
  {"Absolute",                             0},
  {"PC-relative",                          1},
  {"None",                                 2},

  {0, 0}
};

static convert_t ecPUBLICTAGARMPCSGOTUSE[] = {
  {"None",                                 0},
  {"direct",                               1},
  {"GOT-indirect",                         2},

  {0, 0}
};

static convert_t ecPUBLICTAGARMPCSWCHAR[] = {
  {"None",                                 0},
  {"2",                                    2},
  {"4",                                    4},

  {0, 0}
};

static convert_t ecPUBLICTAGARMFPROUNDING[] = {
  {"Unused",                               0},
  {"Needed",                               1},

  {0, 0}
};

static convert_t ecPUBLICTAGARMFPDENORMAL[] = {
  {"Unused",                               0},
  {"Needed",                               1},
  {"Sign only",                            2},

  {0, 0}
};


static convert_t ecPUBLICTAGARMFPNUMBERMODEL[] = {
  {"Unused",                               0},
  {"Finite",                               1},
  {"RTABI",                                2},
  {"IEEE 754",                             3},

  {0, 0}
};

static convert_t ecPUBLICTAGARMENUMSIZE[] = {
  {"Unused",                               0},
  {"small",                                1},
  {"int",                                  2},
  {"forced to int",                        3},

  {0, 0}
};

static convert_t ecPUBLICTAGARMARCHPROFILE[] = {
  {"None",                                 0},
  {"Application",                          'A'},
  {"Realtime",                             'R'},
  {"Microcontroller",                      'M'},
  {"Application or Realtime",              'S'},

  {0, 0}
};

static convert_t ecPUBLICTAGARMALIGNNEEDED[] = {
  {"None",                                 0},
  {"8-byte",                               1},
  {"4-byte",                               2},
  {"8-byte and up to 16-byte extended",    4},
  {"8-byte and up to 32-byte extended",    5},
  {"8-byte and up to 64-byte extended",    6},
  {"8-byte and up to 128-byte extended",   7},
  {"8-byte and up to 256-byte extended",   8},
  {"8-byte and up to 512-byte extended",   9},
  {"8-byte and up to 1024-byte extended",  10},
  {"8-byte and up to 2048-byte extended",  11},
  {"8-byte and up to 4096-byte extended",  12},

  {0, 0}
};

static convert_t ecPUBLICTAGARMALIGNPRESERVED[] = {
  {"None",                                 0},
  {"8-byte, except leaf SP",               1},
  {"8-byte",                               2},
  {"8-byte and up to 16-byte extended",    4},
  {"8-byte and up to 32-byte extended",    5},
  {"8-byte and up to 64-byte extended",    6},
  {"8-byte and up to 128-byte extended",   7},
  {"8-byte and up to 256-byte extended",   8},
  {"8-byte and up to 512-byte extended",   9},
  {"8-byte and up to 1024-byte extended",  10},
  {"8-byte and up to 2048-byte extended",  11},
  {"8-byte and up to 4096-byte extended",  12},

  {0, 0}
};

static convert_t ecPUBLICTAGARMFPHPEXTENSION[] = {
  {"Not Allowed",                          0},
  {"Allowed",                              1},

  {0, 0}
};

static convert_t ecPUBLICTAGARMMVEARCH[] = {
  {"No MVE",                               0},
  {"MVE Integer only",                     1},
  {"MVE Integer and FP",                   2},

  {0, 0}
};

static convert_t ecPUBLICTAGARMDSPEXTENSION[] = {
  {"Follow architecture",                  0},
  {"Allowed",                              1},

  {0, 0}
};

static convert_t ecPUBLICTAGARMFP16BITFORMAT[] = {
  {"None",                                 0},
  {"IEEE 754",                             1},
  {"Alternative Format",                   2},

  {0, 0}
};

static convert_t ecPUBLICTAGARMCPUUNALIGNEDACCESS[] = {
  {"None",                                 0},
  {"v6",                                   1},

  {0, 0}
};

static convert_t ecPUBLICTAGARMFPOPTIMIZATIONGOALS[] = {
  {"None",                                 0},
  {"Prefer Speed",                         1},
  {"Aggressive Speed",                     2},
  {"Prefer Size",                          3},
  {"Aggressive Size",                      4},
  {"Prefer Accuracy",                      5},
  {"Aggressive Accuracy",                  6},

  {0, 0}
};

static convert_t ecPUBLICTAGARMOPTIMIZATIONGOALS[] = {
  {"None",                                 0},
  {"Prefer Speed",                         1},
  {"Aggressive Speed",                     2},
  {"Prefer Size",                          3},
  {"Aggressive Size",                      4},
  {"Prefer Debug",                         5},
  {"Aggressive Debug",                     6},

  {0, 0}
};

static convert_t ecPUBLICTAGARMWMMXARGS[] = {
  {"AAPCS",                                0},
  {"WMMX registers",                       1},
  {"custom",                               2},

  {0, 0}
};

static convert_t ecPUBLICTAGARMVFPARGS[] = {
  {"AAPCS",                                0},
  {"VFP registers",                        1},
  {"custom",                               2},
  {"compatible",                           3},

  {0, 0}
};

static convert_t ecPUBLICTAGARMVIRTUALIZATIONUSE[] = {
  {"Not Allowed",                              0},
  {"TrustZone",                                1},
  {"Virtualization Extensions",                2},
  {"TrustZone and Virtualization Extensions",  3},

  {0, 0}
};

static convert_t ecPUBLICTAGARMBTIUSE[] = {
  {"Compiled without branch target enforcement", 0},
  {"Compiled with branch target enforcement",    1},

  {0, 0}
};

static convert_t ecPUBLICTAGARMDIVUSE[] = {
  {"Allowed in Thumb-ISA, v7-R or v7-M",               0},
  {"Not allowed",                                      1},
  {"Allowed in v7-A with integer division extension",  2},

  {0, 0}
};

static convert_t ecPUBLICTAGARMPACRETUSE[] = {
  {"Compiled without return address signing and authentication", 0},
  {"Compiled with return address signing and authentication",    1},

  {0, 0}
};

static convert_t ecPUBLICTAGARMBTIEXTENSION[] = {
  {"BTI instructions not permitted",                                 0},
  {"BTI instructions permitted in the NOP space",                    1},
  {"BTI instructions permitted in the NOP and in the non-NOP space", 2},

  {0, 0}
};

static convert_t ecPUBLICTAGARMPACEXTENSION[] = {
  {"No PAC/AUT instructions",                                            0},
  {"PAC/AUT instructions permitted in the NOP space",                    1},
  {"PAC/AUT instructions permitted in the NOP and in the non-NOP space", 2},

  {0, 0}
};

convert_t ecPUBLICTAGARM[] = {
  {"TAG_CPU_raw_name",                     4},
  {"TAG_CPU_name",                         5},
  {"TAG_CPU_arch",                         6,    {ecPUBLICTAGARMARCH}},
  {"TAG_CPU_arch_profile",                 7,    {ecPUBLICTAGARMARCHPROFILE}},
  {"TAG_ARM_ISA_use",                      8,    {ecPUBLICTAGARMISAUSE}},
  {"TAG_THUMB_ISA_use",                    9,    {ecPUBLICTAGARMTHUMBISAUSE}},
  {"TAG_FP_arch",                          10,   {ecPUBLICTAGARMFPARCH}},
  {"TAG_WMMX_arch",                        11,   {ecPUBLICTAGARMWMMXARCH}},
  {"TAG_Advanced_SIMD_arch",               12,   {ecPUBLICTAGARMADVSIMDARCH}},
  {"TAG_PCS_config",                       13,   {ecPUBLICTAGARMPCSCONFIG}},
  {"TAG_ABI_PCS_R9_use",                   14,   {ecPUBLICTAGARMPCSR9USE}},
  {"TAG_ABI_PCS_RW_data",                  15,   {ecPUBLICTAGARMPCSRWDATA}},
  {"TAG_ABI_PCS_RO_data",                  16,   {ecPUBLICTAGARMPCSRODATA}},
  {"TAG_ABI_PCS_GOT_use",                  17,   {ecPUBLICTAGARMPCSGOTUSE}},
  {"TAG_ABI_PCS_wchar_t",                  18,   {ecPUBLICTAGARMPCSWCHAR}},
  {"TAG_ABI_FP_rounding",                  19,   {ecPUBLICTAGARMFPROUNDING}},
  {"TAG_ABI_FP_denormal",                  20,   {ecPUBLICTAGARMFPDENORMAL}},
  {"TAG_ABI_FP_exceptions",                21,   {ecPUBLICTAGARMFPROUNDING}},
  {"TAG_ABI_FP_user_exceptions",           22,   {ecPUBLICTAGARMFPROUNDING}},
  {"TAG_ABI_FP_number_model",              23,   {ecPUBLICTAGARMFPNUMBERMODEL}},
  {"TAG_ABI_align_needed",                 24,   {ecPUBLICTAGARMALIGNNEEDED}},
  {"TAG_ABI_align_preserved",              25,   {ecPUBLICTAGARMALIGNPRESERVED}},
  {"TAG_ABI_enum_size",                    26,   {ecPUBLICTAGARMENUMSIZE}},
  {"TAG_ABI_HardFP_use",                   27},
  {"TAG_ABI_VFP_args",                     28,   {ecPUBLICTAGARMVFPARGS}},
  {"TAG_ABI_WMMX_args",                    29,   {ecPUBLICTAGARMWMMXARGS}},
  {"TAG_ABI_optimization_goals",           30,   {ecPUBLICTAGARMOPTIMIZATIONGOALS}},
  {"TAG_ABI_FP_optimization_goals",        31,   {ecPUBLICTAGARMFPOPTIMIZATIONGOALS}},
  {"TAG_compatibility",                    32},
  {"TAG_CPU_unaligned_access",             34,   {ecPUBLICTAGARMCPUUNALIGNEDACCESS}},
  {"TAG_FP_HP_extension",                  36,   {ecPUBLICTAGARMFPHPEXTENSION}},
  {"TAG_ABI_FP_16bit_format",              37,   {ecPUBLICTAGARMFP16BITFORMAT}},
  {"TAG_MP_extension_use",                 42,   {ecPUBLICTAGARMFPHPEXTENSION}},
  {"TAG_DIV_use",                          44,   {ecPUBLICTAGARMDIVUSE}},
  {"TAG_DSP_extension",                    46,   {ecPUBLICTAGARMDSPEXTENSION}},
  {"TAG_MVE_arch",                         48,   {ecPUBLICTAGARMMVEARCH}},
  {"TAG_PAC_extension",                    50,   {ecPUBLICTAGARMPACEXTENSION}},
  {"TAG_BTI_extension",                    52,   {ecPUBLICTAGARMBTIEXTENSION}},
  {"TAG_BTI_use",                          74,   {ecPUBLICTAGARMBTIUSE}},
  {"TAG_PACRET_use",                       76,   {ecPUBLICTAGARMPACRETUSE}},
  {"TAG_nodefaults",                       64},
  {"TAG_also_compatible_with",             65},
  {"TAG_T2EE_use",                         66,   {ecPUBLICTAGARMFPHPEXTENSION}},
  {"TAG_conformance",                      67},
  {"TAG_Virtualization_use",               68,   {ecPUBLICTAGARMVIRTUALIZATIONUSE}},
  {"TAG_MP_extension_use_legacy",          70,   {ecPUBLICTAGARMFPHPEXTENSION}},

  {0, 0}
};

static pick_t ecPUBLICTAGARMSTRING[] = {
  TAG_CPU_name,
  PICK_END
};

